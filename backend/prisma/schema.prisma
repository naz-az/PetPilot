generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String?  @unique
  password    String
  firstName   String?
  lastName    String?
  phone       String?
  avatar      String?
  userType    UserType @default(PET_OWNER)
  isVerified  Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // New fields for enhanced features
  dateOfBirth      DateTime?
  address          String?
  emergencyContact String?
  preferences      Json?     // Store user preferences as JSON
  lastLogin        DateTime?
  resetToken       String?
  resetTokenExpiry DateTime?

  // Pet Owner relationships
  pets        Pet[]
  bookings    Booking[]
  reviews     Review[]
  favorites   Favorite[]
  payments    Payment[]
  
  // New relationships
  socialAccounts   SocialAccount[]
  notifications    Notification[]
  activityLogs     ActivityLog[]

  // Pet Pilot relationships
  pilotProfile     PilotProfile?
  acceptedBookings Booking[] @relation("PilotBookings")
  receivedReviews  Review[]  @relation("PilotReviews")

  @@map("users")
}

enum UserType {
  PET_OWNER
  PET_PILOT
  ADMIN
}

model Pet {
  id          String    @id @default(cuid())
  name        String
  species     String
  breed       String?
  age         Int?
  weight      Float?
  size        PetSize
  color       String?
  photo       String?
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Medical information
  microchipId      String?
  vaccinations     Json?      // Store vaccination records as JSON
  allergies        String[]   // Array of allergies
  medications      String[]   // Array of current medications
  vetContact       String?    // Primary vet contact info
  emergencyVet     String?    // Emergency vet contact
  medicalNotes     String?    // General medical notes
  lastVetVisit     DateTime?  // Last vet visit date
  nextVetVisit     DateTime?  // Next scheduled vet visit

  ownerId  String
  owner    User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  bookings Booking[]
  
  // New relationships
  medicalRecords   MedicalRecord[]
  vetAppointments  VetAppointment[]

  @@map("pets")
}

enum PetSize {
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
}

model PilotProfile {
  id              String   @id @default(cuid())
  bio             String?
  experience      String?
  vehicleType     String
  vehicleModel    String?
  licensePlate    String
  serviceRadius   Float    @default(10.0)
  hourlyRate      Float?
  isAvailable     Boolean  @default(true)
  isVerified      Boolean  @default(false)
  rating          Float    @default(0.0)
  completedTrips  Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  userId   String @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  services        PilotService[]
  availabilities  PilotAvailability[]

  @@map("pilot_profiles")
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String
  basePrice   Float?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  pilotServices   PilotService[]
  bookingServices BookingService[]

  @@map("services")
}

model PilotService {
  id        String   @id @default(cuid())
  price     Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pilotId   String
  pilot     PilotProfile @relation(fields: [pilotId], references: [id], onDelete: Cascade)
  serviceId String
  service   Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([pilotId, serviceId])
  @@map("pilot_services")
}

model PilotAvailability {
  id        String    @id @default(cuid())
  dayOfWeek Int       // 0-6 (Sunday to Saturday)
  startTime String    // HH:mm format
  endTime   String    // HH:mm format
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  pilotId String
  pilot   PilotProfile @relation(fields: [pilotId], references: [id], onDelete: Cascade)

  @@map("pilot_availabilities")
}

model Booking {
  id              String        @id @default(cuid())
  pickupLocation  String
  dropoffLocation String
  pickupLat       Float?
  pickupLng       Float?
  dropoffLat      Float?
  dropoffLng      Float?
  scheduledTime   DateTime
  estimatedPrice  Float
  finalPrice      Float?
  distance        Float?
  duration        Int?          // in minutes
  status          BookingStatus @default(PENDING)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  petOwnerId String
  petOwner   User   @relation(fields: [petOwnerId], references: [id])
  
  pilotId String?
  pilot   User?   @relation("PilotBookings", fields: [pilotId], references: [id])

  petId String
  pet   Pet    @relation(fields: [petId], references: [id])

  services BookingService[]
  tracking BookingTracking[]
  messages BookingMessage[]
  payment  Payment?

  @@map("bookings")
}

enum BookingStatus {
  PENDING
  ACCEPTED
  EN_ROUTE_TO_PICKUP
  PET_PICKED_UP
  EN_ROUTE_TO_DESTINATION
  COMPLETED
  CANCELLED
}

model BookingService {
  id        String   @id @default(cuid())
  price     Float
  createdAt DateTime @default(now())

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  @@map("booking_services")
}

model BookingTracking {
  id        String   @id @default(cuid())
  latitude  Float
  longitude Float
  timestamp DateTime @default(now())

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("booking_tracking")
}

model BookingMessage {
  id        String   @id @default(cuid())
  message   String
  isFromPilot Boolean
  timestamp DateTime @default(now())

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("booking_messages")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviewerId String
  reviewer   User   @relation(fields: [reviewerId], references: [id])

  pilotId String
  pilot   User   @relation("PilotReviews", fields: [pilotId], references: [id])

  @@map("reviews")
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  pilotId String

  @@unique([userId, pilotId])
  @@map("favorites")
}

// New models for enhanced features

model SocialAccount {
  id         String   @id @default(cuid())
  provider   String   // 'google', 'facebook', 'apple'
  providerId String   // ID from the social provider
  email      String?
  name       String?
  avatar     String?
  createdAt  DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("social_accounts")
}

model Payment {
  id             String        @id @default(cuid())
  amount         Float
  currency       String        @default("USD")
  status         PaymentStatus @default(PENDING)
  paymentMethod  String        // 'card', 'apple_pay', 'google_pay', etc.
  paymentIntent  String?       // Stripe payment intent ID
  refundAmount   Float?
  refundReason   String?
  processedAt    DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  bookingId String?  @unique
  booking   Booking? @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  data      Json?            // Additional data for the notification
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum NotificationType {
  BOOKING_UPDATE
  PAYMENT_RECEIVED
  REVIEW_RECEIVED
  PILOT_ARRIVED
  MESSAGE_RECEIVED
  SYSTEM_ALERT
  PROMOTIONAL
}

model ActivityLog {
  id        String   @id @default(cuid())
  action    String   // 'booking_created', 'payment_made', 'review_left', etc.
  details   Json?    // Additional details about the action
  timestamp DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

model MedicalRecord {
  id          String   @id @default(cuid())
  title       String   // e.g., "Annual Checkup", "Vaccination", "Surgery"
  description String?
  diagnosis   String?
  treatment   String?
  medications String[] // Prescribed medications
  cost        Float?
  vetName     String?
  vetClinic   String?
  documents   String[] // URLs to medical documents/images
  visitDate   DateTime
  nextVisit   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  petId String
  pet   Pet    @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@map("medical_records")
}

model VetAppointment {
  id          String            @id @default(cuid())
  title       String
  description String?
  appointmentDate DateTime
  duration    Int?              // Duration in minutes
  status      AppointmentStatus @default(SCHEDULED)
  vetName     String
  vetClinic   String
  vetPhone    String?
  address     String?
  notes       String?
  reminder    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  petId String
  pet   Pet    @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@map("vet_appointments")
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

model WeatherData {
  id          String   @id @default(cuid())
  location    String   // City name or coordinates
  temperature Float
  humidity    Float
  description String   // Weather description
  icon        String   // Weather icon code
  windSpeed   Float?
  uvIndex     Float?
  timestamp   DateTime @default(now())

  @@map("weather_data")
}