Below is my mobile app project documentation. Develop it perfectly.
Please develop it completely. The immediate focus is on implementing the complete feature set with robust backend logic, seamless API integration, and a functional, clean mobile app ui.  

PetPilot: The All-in-One Pet Care & Transport Platform
Executive Summary: The Vision
PetPilot is a revolutionary, technology-driven platform designed to solve the logistical and care challenges faced by modern pet owners. It is a singular, seamless mobile application that connects trusted, vetted service providers ("Pet Pilots") with pet owners seeking safe, reliable transportation and a suite of integrated, high-quality pet care services.
Our vision is to become the indispensable operating system for pet care, building the world's largest and most trusted network of on-demand pet services. By starting with the critical anchor service of transportation, we create an ecosystem of trust and convenience that expands into every facet of a pet's life, from daily care to essential appointments.
The Problem: The Modern Pet Parent's Dilemma
Pet ownership is more popular than ever, but the support infrastructure is fragmented and outdated. Owners face significant stress and logistical hurdles:
    • Transportation Anxiety: Getting an anxious, large, or multiple pets to the vet, groomer, or daycare is a major challenge, especially for those without suitable vehicles or with busy schedules.
    • Fragmented Services: Booking a pet taxi, finding a reliable sitter, scheduling a grooming session, and arranging for in-home care requires contacting multiple different businesses with varying levels of quality and reliability.
    • Trust Deficit: Entrusting a beloved pet to a stranger is a significant emotional barrier. There is no single, reliable standard for vetting and insurance.
    • Time Scarcity: Juggling work, life, and a pet's needs is a constant balancing act. Pet owners need on-demand, reliable solutions that give them back time and peace of mind.
The Solution: Introducing PetPilot
PetPilot is the single-tap solution. Our intuitive app serves as a two-sided marketplace, elegantly designed for both pet owners and our service providers.
How It Works:
    1. A Pet Owner needs a service. They open the PetPilot app.
    2. They book the core transport. They enter the pickup and drop-off locations, number/size of pets, and whether it's on-demand or scheduled. The app provides an instant, standardized price.
    3. They add integrated services. During the booking flow, the owner can seamlessly add on other services offered by the Pilot, such as "Wait & Assist at Vet," "30-Minute Play & Feed Session," or "Pre-Travel Brushing."
    4. A qualified Pet Pilot accepts. The nearest available Pilot who meets the criteria accepts the job.
    5. The service is completed. The owner tracks the entire journey in real-time via GPS and can communicate with the Pilot through the app.
    6. Payment is seamless. The transaction is handled securely in-app, and PetPilot takes a commission.
Key Platform Features
For Pet Owners (Clients):
    • Seamless On-Demand & Scheduled Booking: Instantly book a ride for now or schedule one for the future.
    • Live GPS "Pet-Cam" Tracking: Watch your pet's journey in real-time on a map for complete peace of mind. For premium tiers, Pilots can offer live video check-ins.
    • Integrated Service Marketplace: Browse a Pilot's profile to see their full menu of add-on services, from grooming to hygiene cleans.
    • Trusted & Vetted "Pet Pilots": Every Pilot undergoes a rigorous multi-step vetting process, including background checks, vehicle inspections, and pet handling training certification.
    • Comprehensive Insurance: Every trip and service is backed by our comprehensive Pet & Transit Insurance policy.
    • Unified Communication Hub: Chat or call your Pilot directly through the app without sharing personal numbers.
    • Transparent Profiles & Reviews: View detailed Pilot profiles, see their qualifications, read reviews from other owners, and save your "Favorite Pilots."
For Service Providers (Pet Pilots):
    • Be Your Own Boss: A dedicated "Pilot Mode" in the app allows you to set your own schedule, define your service area, and manage your business.
    • Build Your Service Menu: You must offer transportation. From there, you build your profile by adding any of our approved additional services you are qualified to provide, setting your own prices for these add-ons.
    • Optimized & Guaranteed Earnings: We provide standardized, competitive rates for the transport portion (based on distance, time, and pet size) and you receive instant, secure payouts.
    • Route Optimization & Job Stacking: Our technology helps you manage your day efficiently, minimizing downtime and maximizing earnings.
    • Performance Analytics: A dashboard shows your earnings, ratings, and client feedback to help you grow your business on the platform.
The Business Model: The Path to a Multi-Billion Dollar Valuation
Our monetization strategy is multi-layered, designed for rapid growth and long-term, defensible revenue.
    1. Service Commission (The Engine):
        ◦ Transport Fee: We take a 25% commission on the standardized, algorithm-based transport fee. This is our core revenue driver.
        ◦ Add-On Service Fee: We take a lower 15% commission on the provider-priced add-on services (grooming, cleaning, etc.). This encourages Pilots to offer more services and increases the average transaction value.
    2. PetPilot+ Subscription (Recurring Revenue): A premium subscription for pet owners ($14.99/month) that creates loyalty and predictable income.
        ◦ 10% off all transport fees.
        ◦ Priority booking during peak hours.
        ◦ Waived cancellation fees.
        ◦ Exclusive access to top-rated "Master Pilots."
        ◦ One free "Wellness Check" (e.g., nail trim or brushing) per month.
    3. B2B Partnerships (Scaling): Forge official partnerships with businesses that have high-volume needs, offering them a management dashboard and discounted rates.
        ◦ Veterinary Clinics & Hospitals: Become their official transport partner for non-emergency patient transit.
        ◦ Groomers & Daycares: Offer a "pickup & drop-off" service that they can sell to their clients.
        ◦ Corporate Employee Benefits: Offer PetPilot+ subscriptions as a perk to employees in pet-friendly companies.
        ◦ Apartment Buildings & HOAs: Become the preferred pet service provider for entire residential communities.
    4. Future Ecosystem Expansion:
        ◦ PetPilot Marketplace: An in-app store for pet food, toys, and supplies, with delivery fulfilled by our network of Pilots.
        ◦ Tele-Vet Services: Integrate on-demand video consultations with veterinarians.
Our Competitive Advantage: The "Pilot" Difference
    • Trust & Safety First: Our uncompromising commitment to vetting, training, and insurance will be our strongest brand asset.
    • Integrated Ecosystem: We are not just a taxi app; we are a comprehensive care platform. This integration creates a sticky user experience that competitors cannot easily replicate.
    • Technology-Driven: Superior route optimization, a seamless user interface, and data-driven decision-making will ensure we operate more efficiently than anyone else.
    • Provider-Centric Model: By empowering our Pilots to build their own businesses on our platform, we will attract and retain the highest quality talent in the market.



make it really nice , great styles. use the ,style exactly like image attached-Use the design shown in the attached image — replicate the styling, colors, shadows, glowing etc, and font sizes exactly as in the image., glasmorphic, shadows, clean, same exact font type as in image--
The content itself will of course be different, since this is a different business concept, but the layout and visual style should match exactly.


Technology Stack
Create separate folders for mobile ui and backend.
Mobile App UI 
    •  Core Technology

•  React Native (via [Expo](https://expo.dev/)):  
  TypeScript.

    • Expo SDK 53
    • 


-use the template below if needed, cause it works for my other projects--


---

## Mobile App Technology Stack & Template

### 1. Core Technology

•  React Native (via [Expo](https://expo.dev/)):  
  For building cross-platform mobile apps using JavaScript/TypeScript.

Expo SDK 53


### 2. Project Structure

•  Expo Managed Workflow:  
  Simplifies development, building, and deployment.
•  TypeScript:  
  For type safety and better developer experience.
•  Organized  src/  Directory:  
  -  components/ : Reusable UI components.
  -  constants/ : Theme and static values.
  -  contexts/ : React Context for global state (e.g., Auth, Business).
  -  navigation/ : Navigation setup (e.g., React Navigation).
  -  screens/ : App screens, grouped by feature.
  -  services/ : API and business logic.
  -  types/ : TypeScript type definitions.
  -  utils/ : Utility/helper functions.

### 3. Key Libraries

•  expo:  
  Core Expo SDK for React Native.
•  react-navigation:  
  For navigation between screens.
•  @react-navigation/native-stack:  
  Stack-based navigation.
•  axios:  
  For HTTP requests to backend APIs.
•  @react-native-async-storage/async-storage:  
  Persistent storage for user/session data.
•  react-native-paper or react-native-elements (if used):  
  UI component libraries for consistent design.
•  expo/vector-icons:  
  Icon support.
•  react-redux (if used):  
  For global state management (not always present, but common).
•  Other Expo packages:  
  For splash screens, icons, etc.

### 4. Setup Template

####  package.json  (key dependencies) (use similar version if using any of these libraries, caude it has been tested and works)
 json
{
"dependencies": {
    "@expo/vector-icons": "^14.0.2",
    "@react-native-async-storage/async-storage": "2.1.2",
    "@react-native-community/datetimepicker": "8.2.0",
    "@react-native-community/netinfo": "^11.4.1",
    "@react-navigation/bottom-tabs": "^6.5.20",
    "@react-navigation/native": "^6.1.17",
    "@react-navigation/native-stack": "^6.9.26",
    "@reduxjs/toolkit": "^2.2.7",
    "axios": "^1.7.2",
    "date-fns": "^4.1.0",
    "expo": "~53.0.0",
    "expo-blur": "~14.1.5",
    "expo-document-picker": "~12.0.2",
    "expo-font": "~13.3.2",
    "expo-image-picker": "~15.0.7",
    "expo-linear-gradient": "~14.1.5",
    "expo-splash-screen": "~0.30.10",
    "expo-status-bar": "~2.2.3",
    "react": "19.0.0",
    "react-native": "0.79.5",
    "react-native-chart-kit": "^6.12.0",
    "react-native-gesture-handler": "~2.24.0",
    "react-native-paper": "^5.12.3",
    "react-native-safe-area-context": "5.4.0",
    "react-native-screens": "~4.11.1",
    "react-native-svg": "^15.11.2",
    "react-native-tab-view": "^3.5.2",
    "react-redux": "^9.1.2"
  },
  "devDependencies": {
    "@babel/core": "^7.20.0",
    "@expo/metro-runtime": "~4.0.0",
    "@types/react": "~19.0.10",
    "@typescript-eslint/eslint-plugin": "^7.7.0",
    "@typescript-eslint/parser": "^7.7.0",
    "eslint": "^8.57.0",
    "jest": "^29.2.1",
    "typescript": "^5.1.3"
  },
  "private": true
}

 

####  tsconfig.json 
 json
{
  "compilerOptions": {
    "strict": true,
    "jsx": "react-native",
    "moduleResolution": "node"
  }
}
 

####  App.tsx 
 tsx
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import AppNavigator from './src/navigation/AppNavigator';

export default function App() {
  return (
    <NavigationContainer>
      <AppNavigator />
    </NavigationContainer>
  );
}
 

####  src/navigation/AppNavigator.tsx 
 tsx
import React from 'react';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
// import your screens here

const Stack = createNativeStackNavigator();

export default function AppNavigator() {
  return (
    <Stack.Navigator>
      {/* Define your screens here */}
    </Stack.Navigator>
  );
}
 

#### Directory Structure

/mobile-app
  /assets
  /src
    /components
    /constants
    /contexts
    /navigation
    /screens
    /services
    /types
    /utils
  App.tsx
  app.json
  package.json
  tsconfig.json


---

fix all npx emit errors at the end


Backend
    • Runtime: Node.js 18+ with Express
    • Language: TypeScript 
    • API Architecture: RESTful API 
    • Authentication: JWT with refresh tokens 
    • Real-time: Socket.io    
    • ORM: Prisma (type-safe database access) 
    • API Documentation: Swagger
Database
    • Development: Local PostgreSQL 14+ : use DATABASE_URL="postgresql://postgres:password@localhost:5470/petpilot_db"
    • Production: CockroachDB PostgreSQL   


Additionally, a crucial part of this initial setup will be Initial Data Seeding. A dedicated seed script should created to populate all database tables with simple, non-empty sample data. This script must ensure at least one entry is added to every table, which is essential for populating the app with initial content for immediate development, testing, and demonstration purposes. 
make sure to create shared components like button, modal, cards, tables. alerts etc so each page with have consistent styling. Make sure use consistent layout for every page in the platform---

implement the complete  backend, mobile ui frontend, database, seed data to make sure this works perfectly. Every mobile app ui component should open correct modals, perform correct CRUD operations, direct to correct functionalities, open modals, alerts, etc----implement the complete feature set with robust backend logic, seamless API integration,---,


ive already started the database like this: (base) PS C:\Users\anasr\Downloads\PetPilot> docker run --name petpilot-postgres -e POSTGRES_PASSWORD=password -e POSTGRES_DB=petpilot_db -p 5470:5432 -d postgres
>> 
a460d40daf5b5bb95476b9586ccb52d3dfd4a3da46a8b9f7ad5363148995d513

For starting, just do 3 pages, login, register and homepage (to break down into manageable steps)